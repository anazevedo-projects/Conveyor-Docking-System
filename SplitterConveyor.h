/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class SplitterConveyor */

#ifndef _Included_SplitterConveyor
#define _Included_SplitterConveyor
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     SplitterConveyor
 * Method:    initializeHardwarePorts
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_initializeHardwarePorts
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1_getPosition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_cylinder1_1getPosition
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1_moveForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1_1moveForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1_moveBackward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1_1moveBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1_stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1_1stop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2_getPosition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_cylinder2_1getPosition
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2_moveForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder2_1moveForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2_moveBackward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder2_1moveBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2_stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder2_1stop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStart_getPosition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_cylinderStart_1getPosition
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStart_moveForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinderStart_1moveForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStart_moveBackward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinderStart_1moveBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStart_stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinderStart_1stop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    getIdentificationSensors
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_getIdentificationSensors
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    button1_pressed
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_button1_1pressed
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    button2_pressed
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_button2_1pressed
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    buttonEnd_pressed
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_buttonEnd_1pressed
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    read_Pack_ID_1
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_read_1Pack_1ID_11
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    read_Pack_ID_2
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_read_1Pack_1ID_12
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    turn_Led_On
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_turn_1Led_1On
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    turn_Led_Off
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_turn_1Led_1Off
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    verify_Led
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_verify_1Led
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    sensorCylinder1
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_sensorCylinder1
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    sensorCylinder2
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_sensorCylinder2
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    conveyorMove
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_conveyorMove
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    conveyorstop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_conveyorstop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    read_state
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_read_1state
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    rebuild_state
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_rebuild_1state
  (JNIEnv *, jclass, jint);

#ifdef __cplusplus
}
#endif
#endif
